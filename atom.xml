<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Andy Czerwonka]]></title>
  <link href="http://andyczerwonka.com/atom.xml" rel="self"/>
  <link href="http://andyczerwonka.com/"/>
  <updated>2013-01-02T11:06:29-07:00</updated>
  <id>http://andyczerwonka.com/</id>
  <author>
    <name><![CDATA[Andy Czerwonka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why Play?]]></title>
    <link href="http://andyczerwonka.com/blog/2013/01/02/why-play/"/>
    <updated>2013-01-02T09:20:00-07:00</updated>
    <id>http://andyczerwonka.com/blog/2013/01/02/why-play</id>
    <content type="html"><![CDATA[<p>I&#8217;ll do a small series of posts describing, in a little detail, the <a href="https://github.com/andyczerwonka/dolphin">Dolphin</a> architecture and the reasons for making the choices I&#8217;ve made. Today I&#8217;ll focus on the <a href="http://www.playframework.org/">Play Framework</a>. There were many drivers, but I&#8217;ll focus on the four main ones.</p>

<ol>
<li><a href="http://www.scala-lang.org/">Scala</a></li>
<li>Scalability &amp; Programming Model</li>
<li><a href="http://akka.io/">Akka</a></li>
<li><a href="http://typesafe.com/">Typesafe</a></li>
</ol>


<h2>Scala</h2>

<p>The choice of Scala is a personal one. Many argue it&#8217;s fantastic, many argue it&#8217;s too complex. I will argue it makes me a better programmer. I won&#8217;t get into a language debate here, but I will say that it&#8217;s a language that is only gaining in popularity and is arguably the best choice for JVM development today and for the foreseeable future.</p>

<h2>Scalability &amp; Programming Model</h2>

<p>Play is backed by <a href="https://netty.io/">Netty</a>, the asynchronous event-driven NIO framework. I don&#8217;t want/need all the Java Servlet legacy. NIO gives me much better throughput and lower latency. Play also gives me a stateless programming model that allows me to scale out if necessary. In terms of developer productivity, Play&#8217;s roots came from a group of developers that wanted <a href="http://rubyonrails.org/">Rails</a>-like development productivity without the Ruby baggage that comes with it. They wanted a Ruby-esque cruft-free language, but they weren&#8217;t willing to give up type safety and a decent runtime to get it. Who wouldn&#8217;t want that?</p>

<h2>Akka</h2>

<p>Dolphin integrates with many esi.manage nodes. I need a <a href="http://doc.akka.io/docs/akka/snapshot/scala/dataflow.html">scatter/gather type data-flow capability</a> and Akka gives it to me, very naturally and efficiently with the actor programming model. That combined with NIO gives me a very scalable solution, with even one server node.</p>

<h2>Typesafe</h2>

<p>Typesafe spent much of 2012 hiring the some of the <a href="http://typesafe.com/company/team">best Scala developers</a> out there. Some would argue they&#8217;re hoarding! ;-) Martin Odersky, their Chairman and Chief Architect, is the main author of Scala and has endorsed both Akka and Play as part of their technology stack. Typesafe is <a href="http://typesafe.com/company/news/24499">well funded</a> and I don&#8217;t see them going anywhere soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calgary Scala]]></title>
    <link href="http://andyczerwonka.com/blog/2012/12/16/calgary-scala/"/>
    <updated>2012-12-16T15:28:00-07:00</updated>
    <id>http://andyczerwonka.com/blog/2012/12/16/calgary-scala</id>
    <content type="html"><![CDATA[<p>I&#8217;ve moved <a href="https://plus.google.com/u/0/communities/115918964995782373052">Calgary Scala</a> over to <a href="https://plus.google.com/u/0/communities">Google+ Communities</a>. With the combination of Communities, Events and Hangouts, I think Google&#8217;s offering has surpassed <a href="http://www.meetup.com/">Meetup.com</a> as the best service to manage Calgary Scala.</p>

<p>I&#8217;ll see you in 2013 at our first <a href="https://plus.google.com/u/0/events/cupsgrdu33lr5krnoqk4513df9o">Calgary Scala Community Event!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Dolphin]]></title>
    <link href="http://andyczerwonka.com/blog/2012/12/15/introducing-dolphin/"/>
    <updated>2012-12-15T11:14:00-07:00</updated>
    <id>http://andyczerwonka.com/blog/2012/12/15/introducing-dolphin</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been thinking about web application architecture for a while now. I&#8217;ve taken many client-side and server-side frameworks for a spin over the last six-to-nine months. I&#8217;ve built prototype after prototype. I&#8217;ve learned a lot. I <em>think</em> I&#8217;ve learned enough to be innovative yet commercially responsible. It&#8217;s time to take the next step.</p>

<p><a href="https://github.com/andyczerwonka/dolphin">Dolphin</a> is a project that will bring together an array technologies that I&#8217;ve been testing for a large portion of 2012. 2013 will be the year where those efforts will finally produce a commercial offering. Dolphin will not only deliver new value as an integrated product in the the <a href="http://www.3esi.com/">3esi</a> application suite, it&#8217;ll uncover a delivery vehicle for the future generation of 3esi products.</p>

<p>I&#8217;m excited to get started.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Picking a web application platform isn't as easy as it once was]]></title>
    <link href="http://andyczerwonka.com/blog/2012/12/11/picking-a-web-application-platform-isnt-as-easy-as-it-once-was/"/>
    <updated>2012-12-11T14:03:00-07:00</updated>
    <id>http://andyczerwonka.com/blog/2012/12/11/picking-a-web-application-platform-isnt-as-easy-as-it-once-was</id>
    <content type="html"><![CDATA[<p>I find myself in a bit of a conundrum. I&#8217;m building a new, modern, web-based application and not only do I have to pick a technology, I have to pick an architecture. I think it is fair to say that these days its a tough choice because we have more options than we did even 5 years ago.
First things first, I&#8217;ve made the decision that Scala will be the server-side language. I have my reasons, and this is not a Scala versus XYZ post - that choice has been made. I&#8217;ve also sucummed to the fact that we&#8217;re on the web (in the cloud with today&#8217;s jargon), so I&#8217;m not even going to try and get away from Javascript.</p>

<p>Now, assuming Scala, most people would probably jump to either <a href="http://www.playframework.org/">Play!</a> or <a href="http://liftweb.net/">Lift</a>. Probably Play! given it&#8217;s endorsement from Typesafe, but I think I have another more important question that needs answering first. What&#8217;s the architecture? If I want a very rich client, do I really need more than a simple stateless service layer based on the fact that we&#8217;ll have a tonne of Javascript anyway? I&#8217;m not sure it&#8217;ll be a single-page webapp, but is something like <a href="https://github.com/jdegoes/blueeyes">BlueEyes</a> or <a href="http://spray.io/">Spray.io</a> potentially the right choice? Lift and Play! are much more heavyweight in that they take on much more responsibility. They generate the HTML and for these frameworks, the browser can be fairly dumb. Things like routing, validation, Ajax and Comet support are all server-side concerns. Because the browser is more capable today, rich, interactive features are normally implemented by generating and injecting Javascript from the server.</p>

<p>My question boils down to this. Do I go with a traditional Lift/Play! framework where the server takes on both the client and server responsibility or do I go with a <a href="http://www.infoq.com/articles/client-server-application-development-with-html5-and-java">rich client + REST-style service layer</a> where the client takes a more prominent role in the application? An architecture where the client deals with routing, validation, binding, etc. I&#8217;m seeing frameworks like <a href="http://angularjs.org/">Angular.js</a>, <a href="http://emberjs.com/">Ember.js</a>, <a href="http://backbonejs.org/">Backbone.js</a>,&#8230; I&#8217;m not going to list them all but suffice to say that they all take on some of these framework features from a client-side perspective.</p>

<p>If I choose Play!, am I giving up some of that rich UI? What about situations where I want to provide service API&#8217;s for integration/mashup/mobile purposes? How would Play! help me here? Clearly BlueEyes plays well here. I need a service layer regardless.</p>

<p>If I choose BlueEyes, what does my client code look like? How many of these Javascript-based frameworks do I need to give me what I need? Do they scale from a development perspective? I still want my core business-logic in my service layer, but routing, binding.. all that UI stuff would be a concern of the client.</p>

<p>So many choices&#8230; I&#8217;d love to hear your thoughts.</p>
]]></content>
  </entry>
  
</feed>
