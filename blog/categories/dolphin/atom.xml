<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dolphin | Andy Czerwonka]]></title>
  <link href="http://andyczerwonka.com/blog/categories/dolphin/atom.xml" rel="self"/>
  <link href="http://andyczerwonka.com/"/>
  <updated>2014-11-28T13:46:14-07:00</updated>
  <id>http://andyczerwonka.com/</id>
  <author>
    <name><![CDATA[Andy Czerwonka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why Play?]]></title>
    <link href="http://andyczerwonka.com/blog/2013/01/02/why-play/"/>
    <updated>2013-01-02T09:20:00-07:00</updated>
    <id>http://andyczerwonka.com/blog/2013/01/02/why-play</id>
    <content type="html"><![CDATA[<p>I'll do a small series of posts describing, in a little detail, the <a href="https://github.com/andyczerwonka/dolphin">Dolphin</a> architecture and the reasons for making the choices I've made. Today I'll focus on the <a href="http://www.playframework.org/">Play Framework</a>. There were many drivers, but I'll focus on what was most important to me.</p>

<ol>
<li><a href="http://www.scala-lang.org/">Scala</a></li>
<li>Scalability &amp; Programming Model</li>
<li><a href="http://akka.io/">Akka</a></li>
<li><a href="http://typesafe.com/">Typesafe</a></li>
</ol>


<h2>Scala</h2>

<p>The choice of Scala is a personal one. Many argue it's fantastic, many argue it's too complex. I will argue it makes me a better programmer. I won't get into a language debate here, but I will say that it's a language that is only gaining in popularity and is arguably the best choice for JVM development today and for the foreseeable future.</p>

<h2>Scalability &amp; Programming Model</h2>

<p>Play is backed by <a href="https://netty.io/">Netty</a>, the asynchronous event-driven NIO framework. I don't want/need all the Java Servlet legacy. NIO gives me much better throughput and lower latency. Play also gives me a stateless programming model that allows me to scale out if necessary. In terms of developer productivity, Play's roots came from a group of developers that wanted <a href="http://rubyonrails.org/">Rails</a>-like development productivity without the Ruby <del>baggage</del> shortcomings. They wanted a Ruby-esque cruft-free language, but they weren't willing to give up type safety and a decent runtime to get it. Who wouldn't want that?</p>

<h2>Akka</h2>

<p>Dolphin integrates with many esi.manage nodes. I need a <a href="http://doc.akka.io/docs/akka/snapshot/scala/dataflow.html">scatter/gather type data-flow capability</a> and Akka gives it to me, very naturally and efficiently with the actor programming model. That combined with NIO gives me a very scalable solution, with even one server node.</p>

<h2>Typesafe</h2>

<p>Typesafe spent much of 2012 hiring the some of the <a href="http://typesafe.com/company/team">best Scala developers</a> out there. Some would argue they're hoarding! ;-) Martin Odersky, their Chairman and Chief Architect, is the main author of Scala and has endorsed both Akka and Play as part of their technology stack. Typesafe is <a href="http://typesafe.com/company/news/24499">well funded</a> and I don't see them going anywhere soon.</p>
]]></content>
  </entry>
  
</feed>
